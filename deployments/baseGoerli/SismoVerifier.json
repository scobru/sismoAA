{
  "address": "0x96070AC8f59b4dEBCDBa83dBb09f84E5D70726B2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum AuthType",
          "name": "authType",
          "type": "uint8"
        }
      ],
      "name": "AuthTypeNotFoundInVerifiedResult",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER_V2",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APP_ID",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_IMPERSONATION_MODE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SISMO_CONNECT_LIB_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_appId",
          "type": "bytes16"
        }
      ],
      "name": "config",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "appId",
              "type": "bytes16"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isImpersonationMode",
                  "type": "bool"
                }
              ],
              "internalType": "struct VaultConfig",
              "name": "vault",
              "type": "tuple"
            }
          ],
          "internalType": "struct SismoConnectConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "bytes16",
          "name": "_appId",
          "type": "bytes16"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "sismoVerify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc863208385c92f41a053ff36499b5aa8455d2e1a11bafc5c30c4fc4f3a1ba7b4",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x96070AC8f59b4dEBCDBa83dBb09f84E5D70726B2",
    "transactionIndex": 4,
    "gasUsed": "1756923",
    "logsBloom": "0x
    "blockHash": "0x4dc4ca3a72ec72d4fab8ffc9ace66d5c46a90acb4430194af6173b0d7baac0b5",
    "transactionHash": "0xc863208385c92f41a053ff36499b5aa8455d2e1a11bafc5c30c4fc4f3a1ba7b4",
    "logs": [],
    "blockNumber": 10973096,
    "cumulativeGasUsed": "1866776",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 19,
  "solcInputHash": "87d738ea78305c140d2aaf8e847a6df7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum AuthType\",\"name\":\"authType\",\"type\":\"uint8\"}],\"name\":\"AuthTypeNotFoundInVerifiedResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER_V2\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APP_ID\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_IMPERSONATION_MODE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SISMO_CONNECT_LIB_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_appId\",\"type\":\"bytes16\"}],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"appId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isImpersonationMode\",\"type\":\"bool\"}],\"internalType\":\"struct VaultConfig\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct SismoConnectConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"bytes16\",\"name\":\"_appId\",\"type\":\"bytes16\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sismoVerify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SismoVerifier.sol\":\"SismoVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SismoVerifier.sol\":{\"content\":\"/**\\r\\n * @title MecenateVerifier\\r\\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\\r\\n */\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"./helpers/SismoConnectLib.sol\\\";\\r\\n\\r\\ncontract SismoVerifier is SismoConnect {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        bytes16 _appId,\\r\\n        address _to\\r\\n    ) external view returns (uint256, uint256, bytes memory) {\\r\\n        require(sismoConnectResponse.length > 0, \\\"empty response\\\");\\r\\n\\r\\n        // Build authorization requests\\r\\n        AuthRequest[] memory auths = new AuthRequest[](2);\\r\\n\\r\\n        auths[0] = buildAuth(AuthType.VAULT);\\r\\n        auths[1] = buildAuth(AuthType.TWITTER);\\r\\n\\r\\n        // Verify the response\\r\\n        SismoConnectVerifiedResult memory result = verify({\\r\\n            appId: _appId,\\r\\n            responseBytes: sismoConnectResponse,\\r\\n            auths: auths,\\r\\n            signature: buildSignature({message: abi.encode(_to)})\\r\\n        });\\r\\n\\r\\n        bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\\r\\n            result\\r\\n        );\\r\\n\\r\\n        // Store the verified auths\\r\\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\\r\\n            result.auths.length\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            _verifiedAuths[i] = result.auths[i];\\r\\n        }\\r\\n\\r\\n        // Get the vaultId of the user\\r\\n        // --> vaultId = hash(userVaultSecret, appId)\\r\\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\\r\\n\\r\\n        uint256 twitterId = SismoConnectHelper.getUserId(\\r\\n            result,\\r\\n            AuthType.TWITTER\\r\\n        );\\r\\n\\r\\n        return (vaultId, twitterId, signedMessage);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf1c16de115e6a4572c0442a973d90e1477f791aa204a79a55b92cd0dbb1fcd44\"},\"contracts/helpers/SismoConnectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \\\"./utils/RequestBuilder.sol\\\";\\r\\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \\\"./utils/AuthRequestBuilder.sol\\\";\\r\\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \\\"./utils/ClaimRequestBuilder.sol\\\";\\r\\nimport {SignatureBuilder, SignatureRequest, Signature} from \\\"./utils/SignatureBuilder.sol\\\";\\r\\nimport {VaultConfig} from \\\"./utils/Structs.sol\\\";\\r\\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \\\"./interfaces/ISismoConnectVerifier.sol\\\";\\r\\nimport {IAddressesProvider} from \\\"./interfaces/IAddressesProvider.sol\\\";\\r\\nimport {SismoConnectHelper} from \\\"./utils/SismoConnectHelper.sol\\\";\\r\\n\\r\\ncontract SismoConnect {\\r\\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\\r\\n\\r\\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\\r\\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\\r\\n\\r\\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\\r\\n\\r\\n    // external libraries\\r\\n    AuthRequestBuilder immutable _authRequestBuilder;\\r\\n    ClaimRequestBuilder immutable _claimRequestBuilder;\\r\\n    SignatureBuilder immutable _signatureBuilder;\\r\\n    RequestBuilder immutable _requestBuilder;\\r\\n\\r\\n    // config\\r\\n    bytes16 public APP_ID;\\r\\n    bool public immutable IS_IMPERSONATION_MODE;\\r\\n\\r\\n    constructor() {\\r\\n        IS_IMPERSONATION_MODE = false;\\r\\n\\r\\n        _sismoConnectVerifier = ISismoConnectVerifier(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"sismoConnectVerifier-v1.2\\\"))\\r\\n        );\\r\\n        // external libraries\\r\\n        _authRequestBuilder = AuthRequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"authRequestBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _claimRequestBuilder = ClaimRequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"claimRequestBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _signatureBuilder = SignatureBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"signatureBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _requestBuilder = RequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"requestBuilder-v1.1\\\"))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // public function because it needs to be used by this contract and can be used by other contracts\\r\\n    function config(\\r\\n        bytes16 _appId\\r\\n    ) public pure returns (SismoConnectConfig memory) {\\r\\n        return buildConfig(_appId);\\r\\n    }\\r\\n\\r\\n    function buildConfig(\\r\\n        bytes16 appId\\r\\n    ) internal pure returns (SismoConnectConfig memory) {\\r\\n        SismoConnectConfig memory result = SismoConnectConfig({\\r\\n            appId: appId,\\r\\n            vault: buildVaultConfig()\\r\\n        });\\r\\n        require(appId != bytes16(0), \\\"appId cannot be empty\\\");\\r\\n        require(\\r\\n            result.vault.isImpersonationMode == false,\\r\\n            \\\"impersonation mode is not supported\\\"\\r\\n        );\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\\r\\n        return VaultConfig({isImpersonationMode: false});\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        bytes16 appId,\\r\\n        bytes memory responseBytes,\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) internal view returns (SismoConnectVerifiedResult memory) {\\r\\n        SismoConnectResponse memory response = abi.decode(\\r\\n            responseBytes,\\r\\n            (SismoConnectResponse)\\r\\n        );\\r\\n        SismoConnectRequest memory request = buildRequest(auths, signature);\\r\\n        return _sismoConnectVerifier.verify(response, request, config(appId));\\r\\n    }\\r\\n\\r\\n    function buildAuth(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) internal view returns (AuthRequest memory) {\\r\\n        return\\r\\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\\r\\n    }\\r\\n\\r\\n    function buildAuth(\\r\\n        AuthType authType\\r\\n    ) internal view returns (AuthRequest memory) {\\r\\n        return _authRequestBuilder.build(authType);\\r\\n    }\\r\\n\\r\\n    function buildSignature(\\r\\n        bytes memory message\\r\\n    ) internal view returns (SignatureRequest memory) {\\r\\n        return _signatureBuilder.build(message);\\r\\n    }\\r\\n\\r\\n    function buildRequest(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) internal view returns (SismoConnectRequest memory) {\\r\\n        return _requestBuilder.build(auths, signature);\\r\\n    }\\r\\n\\r\\n    function _GET_EMPTY_SIGNATURE_REQUEST()\\r\\n        internal\\r\\n        view\\r\\n        returns (SignatureRequest memory)\\r\\n    {\\r\\n        return _signatureBuilder.buildEmpty();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7e1431e5e8235734f69c8da7d39018fa9c47bef9c34105e5f55e1dd86acf561b\",\"license\":\"MIT\"},\"contracts/helpers/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n    /**\\r\\n     * @dev Sets the address of a contract.\\r\\n     * @param contractAddress Address of the contract.\\r\\n     * @param contractName Name of the contract.\\r\\n     */\\r\\n    function set(address contractAddress, string memory contractName) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of multiple contracts.\\r\\n     * @param contractAddresses Addresses of the contracts.\\r\\n     * @param contractNames Names of the contracts.\\r\\n     */\\r\\n    function setBatch(\\r\\n        address[] calldata contractAddresses,\\r\\n        string[] calldata contractNames\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of a contract.\\r\\n     * @param contractName Name of the contract (string).\\r\\n     * @return Address of the contract.\\r\\n     */\\r\\n    function get(string memory contractName) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of a contract.\\r\\n     * @param contractNameHash Hash of the name of the contract (bytes32).\\r\\n     * @return Address of the contract.\\r\\n     */\\r\\n    function get(bytes32 contractNameHash) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts inputed.\\r\\n     * @param contractNames Names of the contracts as strings.\\r\\n     */\\r\\n    function getBatch(\\r\\n        string[] calldata contractNames\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts inputed.\\r\\n     * @param contractNamesHash Names of the contracts as strings.\\r\\n     */\\r\\n    function getBatch(\\r\\n        bytes32[] calldata contractNamesHash\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts in `_contractNames`\\r\\n     * @return Names, Hashed Names and Addresses of all contracts.\\r\\n     */\\r\\n    function getAll()\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory, bytes32[] memory, address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xa58b350d38576b547693bb6bc17044578ae5e91d02344403d674df990e6486ab\",\"license\":\"MIT\"},\"contracts/helpers/interfaces/ISismoConnectVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../utils/Structs.sol\\\";\\r\\n\\r\\ninterface ISismoConnectVerifier {\\r\\n    event VerifierSet(bytes32, address);\\r\\n\\r\\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\\r\\n    error NamespaceMismatch(\\r\\n        bytes16 receivedNamespace,\\r\\n        bytes16 expectedNamespace\\r\\n    );\\r\\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\\r\\n    error SignatureMessageMismatch(\\r\\n        bytes requestMessageSignature,\\r\\n        bytes responseMessageSignature\\r\\n    );\\r\\n\\r\\n    function verify(\\r\\n        SismoConnectResponse memory response,\\r\\n        SismoConnectRequest memory request,\\r\\n        SismoConnectConfig memory config\\r\\n    ) external view returns (SismoConnectVerifiedResult memory);\\r\\n\\r\\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x082a1b89e3ae4a3a7e7494a81aa7a5e8cb9cab21a81ce14c7e6ae8335061d18c\",\"license\":\"MIT\"},\"contracts/helpers/utils/AuthRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract AuthRequestBuilder {\\r\\n    // default values for Auth Request\\r\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\\r\\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\\r\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\\r\\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    error InvalidUserIdAndIsSelectableByUserAuthType();\\r\\n    error InvalidUserIdAndAuthType();\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // allow dev to choose for isOptional\\r\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\r\\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\r\\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId,\\r\\n        bool isOptional\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bytes memory extraData\\r\\n    ) internal pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: _authIsSelectableDefaultValue(\\r\\n                    authType,\\r\\n                    userId\\r\\n                ),\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) internal pure returns (AuthRequest memory) {\\r\\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\\r\\n        // to choose the account they want to use for the app.\\r\\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\\r\\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\\r\\n        // If this combination is detected, the function will revert with an error.\\r\\n        if (\\r\\n            authType != AuthType.VAULT &&\\r\\n            userId == 0 &&\\r\\n            isSelectableByUser == false\\r\\n        ) {\\r\\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\\r\\n        }\\r\\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\\r\\n        if (\\r\\n            authType == AuthType.VAULT &&\\r\\n            userId != 0 &&\\r\\n            isSelectableByUser == false\\r\\n        ) {\\r\\n            revert InvalidUserIdAndAuthType();\\r\\n        }\\r\\n        return\\r\\n            AuthRequest({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _authIsSelectableDefaultValue(\\r\\n        AuthType authType,\\r\\n        uint256 requestedUserId\\r\\n    ) internal pure returns (bool) {\\r\\n        // isSelectableByUser value should always be false in case of VAULT authType.\\r\\n        // This is because the user can't select the account they want to use for the app.\\r\\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\\r\\n        if (authType == AuthType.VAULT) {\\r\\n            return false;\\r\\n        }\\r\\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\\r\\n        // so we want the default value for `isSelectableByUser` to be `true`.\\r\\n        if (requestedUserId == 0) {\\r\\n            return true;\\r\\n        }\\r\\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\\r\\n        // so we want the default value for `isSelectableByUser` to be `false`.\\r\\n        else {\\r\\n            return false;\\r\\n        }\\r\\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf66737a67a424a42db5a6356fa577712ca07e5a89a2667a7ef3bb2abfc054913\",\"license\":\"MIT\"},\"contracts/helpers/utils/ClaimRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract ClaimRequestBuilder {\\r\\n    // default value for Claim Request\\r\\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\\r\\n        bytes16(\\\"latest\\\");\\r\\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\\r\\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\\r\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\\r\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\\r\\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                claimType: claimType,\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                claimType: claimType,\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // allow dev to choose for isOptional\\r\\n    // we force to also set isSelectableByUser\\r\\n    // otherwise function signatures would be colliding\\r\\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\\r\\n    // we keep this logic for all function signature combinations\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7a20ce58960f47744184c31a821bf398214081669b4d766d638db3340eb9264e\",\"license\":\"MIT\"},\"contracts/helpers/utils/RequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport {SignatureBuilder} from \\\"./SignatureBuilder.sol\\\";\\r\\n\\r\\ncontract RequestBuilder {\\r\\n    // default value for namespace\\r\\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\\\"main\\\"));\\r\\n    // default value for a signature request\\r\\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\\r\\n        SignatureRequest({\\r\\n            message: \\\"MESSAGE_SELECTED_BY_USER\\\",\\r\\n            isSelectableByUser: false,\\r\\n            extraData: \\\"\\\"\\r\\n        });\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // build with arrays for auths and claims\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xed1a2ba47be3b4a971b949842363c0e14180ebcf10d808075091a2330e5973fd\",\"license\":\"MIT\"},\"contracts/helpers/utils/SignatureBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SignatureBuilder {\\r\\n    // default values for Signature Request\\r\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\\r\\n        \\\"MESSAGE_SELECTED_BY_USER\\\";\\r\\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\\r\\n        false;\\r\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    function build(\\r\\n        bytes memory message\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function buildEmpty() external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ddc35c54605315cefa153e2752c5efc9970072bae955420b527cf2711fa89b0\",\"license\":\"MIT\"},\"contracts/helpers/utils/SismoConnectHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\nlibrary SismoConnectHelper {\\r\\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\\r\\n\\r\\n    function getUserId(\\r\\n        SismoConnectVerifiedResult memory result,\\r\\n        AuthType authType\\r\\n    ) internal pure returns (uint256) {\\r\\n        // get the first userId that matches the authType\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            if (result.auths[i].authType == authType) {\\r\\n                return result.auths[i].userId;\\r\\n            }\\r\\n        }\\r\\n        revert AuthTypeNotFoundInVerifiedResult(authType);\\r\\n    }\\r\\n\\r\\n    function getUserIds(\\r\\n        SismoConnectVerifiedResult memory result,\\r\\n        AuthType authType\\r\\n    ) internal pure returns (uint256[] memory) {\\r\\n        // get all userIds that match the authType\\r\\n        uint256[] memory userIds = new uint256[](result.auths.length);\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            if (result.auths[i].authType == authType) {\\r\\n                userIds[i] = result.auths[i].userId;\\r\\n            }\\r\\n        }\\r\\n        return userIds;\\r\\n    }\\r\\n\\r\\n    function getSignedMessage(\\r\\n        SismoConnectVerifiedResult memory result\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return result.signedMessage;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08c39ecd8cf8b6ed3028f1b135cd20b3a2b5acf961728a6f7ab5622a66f1fcde\",\"license\":\"MIT\"},\"contracts/helpers/utils/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct SismoConnectRequest {\\r\\n    bytes16 namespace;\\r\\n    AuthRequest[] auths;\\r\\n    ClaimRequest[] claims;\\r\\n    SignatureRequest signature;\\r\\n}\\r\\n\\r\\nstruct SismoConnectConfig {\\r\\n    bytes16 appId;\\r\\n    VaultConfig vault;\\r\\n}\\r\\n\\r\\nstruct VaultConfig {\\r\\n    bool isImpersonationMode;\\r\\n}\\r\\n\\r\\nstruct AuthRequest {\\r\\n    AuthType authType;\\r\\n    uint256 userId; // default: 0\\r\\n    // flags\\r\\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct ClaimRequest {\\r\\n    ClaimType claimType; // default: GTE\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\r\\n    uint256 value; // default: 1\\r\\n    // flags\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct SignatureRequest {\\r\\n    bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\r\\n    bool isSelectableByUser; // default: false\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nenum AuthType {\\r\\n    VAULT,\\r\\n    GITHUB,\\r\\n    TWITTER,\\r\\n    EVM_ACCOUNT,\\r\\n    TELEGRAM,\\r\\n    DISCORD\\r\\n}\\r\\n\\r\\nenum ClaimType {\\r\\n    GTE,\\r\\n    GT,\\r\\n    EQ,\\r\\n    LT,\\r\\n    LTE\\r\\n}\\r\\n\\r\\nstruct Auth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Claim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Signature {\\r\\n    bytes message;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectResponse {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    bytes signedMessage;\\r\\n    SismoConnectProof[] proofs;\\r\\n}\\r\\n\\r\\nstruct SismoConnectProof {\\r\\n    Auth[] auths;\\r\\n    Claim[] claims;\\r\\n    bytes32 provingScheme;\\r\\n    bytes proofData;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectVerifiedResult {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    VerifiedAuth[] auths;\\r\\n    VerifiedClaim[] claims;\\r\\n    bytes signedMessage;\\r\\n}\\r\\n\\r\\nstruct VerifiedAuth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n    bytes proofData;\\r\\n}\\r\\n\\r\\nstruct VerifiedClaim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n    uint256 proofId;\\r\\n    bytes proofData;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d7238088b9d4b679f489531b76e4dbf851e7c33a2a8b50a786273125aa0e623\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610140604090808252346200037e5760009161012091838352620000238162000383565b6019815260207f7369736d6f436f6e6e65637456657269666965722d76312e320000000000000081830152825191826200006c63349f642f60e11b9283835260048301620003fa565b038284733cd5334eb64ebbd4003b72022cc25465f1bfcee69281845afa9384156200037457879462000350575b506001600160a01b039384166080528451620000f8908490620000bc8162000383565b601781527f61757468526571756573744275696c6465722d76312e310000000000000000008282015287518093819287835260048301620003fa565b0381855afa908115620003025790859189916200032e575b501660a05262000163838651620001278162000383565b601881527f636c61696d526571756573744275696c6465722d76312e3100000000000000008282015287518093819287835260048301620003fa565b0381855afa908115620003025790859189916200030c575b501660c052620001ce838651620001928162000383565b601581527f7369676e61747572654275696c6465722d76312e3100000000000000000000008282015287518093819287835260048301620003fa565b0381855afa908115620003025791858594926200023e96948b91620002e0575b501660e052865191620002018362000383565b601383527f726571756573744275696c6465722d76312e3100000000000000000000000000848401528751809681948293835260048301620003fa565b03915afa958615620002d557956200029f575b5050610100931683525190611dfb928362000446843960805183610b96015260a0518381816101a00152610214015260c05183505060e051836102b601525182610a0b015251816116f00152f35b620002c4929550803d10620002cd575b620002bb8183620003b5565b810190620003d9565b92388062000251565b503d620002af565b8451903d90823e3d90fd5b620002fb9150853d8711620002cd57620002bb8183620003b5565b38620001ee565b86513d8a823e3d90fd5b620003279150853d8711620002cd57620002bb8183620003b5565b386200017b565b620003499150853d8711620002cd57620002bb8183620003b5565b3862000110565b6200036c919450833d8511620002cd57620002bb8183620003b5565b923862000099565b85513d89823e3d90fd5b600080fd5b604081019081106001600160401b038211176200039f57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200039f57604052565b908160209103126200037e57516001600160a01b03811681036200037e5790565b6020808252825181830181905290939260005b8281106200043057505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016200040d56fe6101e080604052600436101561001457600080fd5b60003560e01c908163469163011461171557508063a183dc27146116d8578063c187bbc1146116ad578063c9512d9914611691578063dff37819146100bc5763e88c88971461006257600080fd5b346100b75760203660031901126100b7576004356001600160801b0319811681036100b757610092604091611979565b6100b582518092602080916001600160801b031981511684520151511515910152565bf35b600080fd5b346100b75760603660031901126100b7576004356001600160401b0381116100b757366023820112156100b7578060040135906101076100fb83611836565b60405180608052611815565b816080515236602483830101116100b757816000926024602093018360805101376080510101526024356001600160801b0319811690036100b7576044356001600160a01b03811681036100b757608051511561165b576040519061016b826117fa565b6002825260005b6040811061164457506101836118b0565b50604051633a0ba6ff60e01b8152600060048201819052816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561106457600091611603575b506101e3836118e5565b526101ed826118e5565b506101f66118b0565b50604051633a0ba6ff60e01b815260026004820152906000826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215611064576000926115b7575b506000906102b29261025e85611908565b5261026884611908565b506040519060018060a01b0316602082015260208152610287816117c4565b61028f611c62565b5060405180938192631a0d7ccb60e21b8352602060048401526024830190611874565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561106457600091611576575b50606060a060405161030081611742565b6000815260006020820152600060408201528280820152826080820152015260805180518101610180526020816101805103126100b7576020810151610100526001600160401b0361010051116100b75760a09061010051016101805103126100b75760405161036f81611773565b6103826020610100516080510101611a67565b81526103976040610100516080510101611a67565b6020820152606061010051608051010151604082015261010051608051016080810151906001600160401b0382116100b75760206103dd92816101805101920101611a7c565b6060820152610100516080510160a081015160c0526001600160401b0360c051116100b75760206101805101603f60c05183010112156100b75760c05101602001519161042983611899565b936104376040519586611815565b838552602085019460c0516101005160805101016020610180510160408760051b830101116100b757604001610120529194935b60c05161010051608051010160408260051b8201016101205110156109975761012051516101c0526001600160401b036101c051116100b75760a090601f19906101c05101610180510301126100b7576040516101a0526104ce6101a051611773565b6101c05160c05161010051608051010101604081015160e0526001600160401b0360e051116100b75760206101805101605f60e05183010112156100b75760409060e0510101516101605261052561016051611899565b956105336040519788611815565b610160518752602087019260e0516101c05160c05161010051608051010101016020610180510160606101605160051b830101116100b757606001935b60e0516101c05160c05161010051608051010101019060606101605160051b8301018610156106b1578551916001600160401b0383116100b7576101805160a09184019003603f1901126100b757604051916105cb83611773565b60608160e0516101c05160c051610100516080510101010101015160068110156100b757835261061260808260e0516101c05160c051610100518551010101010101611ac1565b602084015261063960a08260e0516101c05160c05161010051608051010101010101611ac1565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e0820151926001600160401b0384116100b7576106a16020949360608695866101805101920101611a7c565b6080820152815201940193610570565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a0526001600160401b0360a051116100b75760206101805101605f60a05183010112156100b75760409060a0510101516101405261071661014051611899565b956107246040519788611815565b610140518752602087019260a0516101c05160c05161010051608051010101016020610180510160606101405160051b830101116100b757606001935b60a0516101c05160c05161010051608051010101019060606101405160051b8301018610156108c9578551916001600160401b0383116100b7576101805160c09184019003603f1901126100b757604051916107bc83611742565b60608160a0516101c05160c051610100516080510101010101015160058110156100b757835261080360808260a0516101c05160c051610100518551010101010101611a67565b602084015261082960a08281516101c05160c05161010051608051010101010101611a67565b604084015261084f60c08260a0516101c051835161010051608051010101010101611ac1565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c05161010051608051010101010190610100820151926001600160401b0384116100b7576108b96020949360608695866101805101920101611a7c565b60a0820152815201940193610761565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a0810151906001600160401b0382116100b75760406109309260206101805101920101611a7c565b60606101a05101526101c05160c051610100516080510101019060c08201516001600160401b0381116100b757602092604061097492856101805101920101611a7c565b60806101a05101526101a05181520194602061012051016101205291949361046b565b848760006109f5868860808601526040516109b18161178e565b838152606060208201526060604082015260606109cc611c62565b910152610a076040519485938493632ceb1e8d60e01b8552604060048601526044850190611afe565b83810360031901602485015290611ba1565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115611064576000916112b2575b5090610a51602435611979565b906040519283916312b037ff60e01b8352608060048401526001600160801b031981511660848401526001600160801b031960208201511660a4840152604081015160c48401526080610ab4606083015160a060e4870152610124860190611874565b9101519060831984820301610104850152815180825260208201916020808360051b8301019401926000915b8383106111085750505050506003198382030160248401526001600160801b03198251168152610b1f6020830151608060208401526080830190611afe565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b8383106110705788600081808d610b92610b718e8e60608f0151906060818403910152611ba1565b82516001600160801b03191660448501526020909201515115156064840152565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561106457600091610cc2575b5060a081015190606081019081515192610be884611899565b93610bf66040519586611815565b808552610c05601f1991611899565b0160005b818110610c8957505060005b83518051821015610c4f5790610c2e81610c4a93611918565b51610c398288611918565b52610c448187611918565b5061192c565b610c15565b8284610c85610c66610c6083611ce8565b92611d6a565b9260405193849384526020840152606060408401526060830190611874565b0390f35b602090604051610c9881611773565b60008152600083820152600060408201526060808201526060608082015282828901015201610c09565b90503d806000833e610cd48183611815565b60208282810103126100b7578151916001600160401b0383116100b75760c083820183830103126100b75760405192610d0c84611742565b610d17818301611a67565b8452610d27602082840101611a67565b602085015281810160408181015190860152606001516001600160401b0381116100b757838301601f82848601010112156100b757808284010151610d6b81611899565b91610d796040519384611815565b8183526020830186860160208460051b84888a01010101116100b7576020828688010101905b60208460051b84888a010101018210610f7a57505050506060850152608081830101516001600160401b0381116100b757838301601f82848601010112156100b757808284010151610df081611899565b91610dfe6040519384611815565b8183526020830186860160208460051b84888a01010101116100b7576020828688010101905b60208460051b84888a010101018210610e6f5750505050608085015260a08183010151906001600160401b0382116100b757610e64938301920101611a7c565b60a082015281610bcf565b81516001600160401b0381116100b75760e0888801850182018a8a0103601f1901126100b75760405191610ea2836117a9565b602082868a8c010101015160058110156100b7578352610eca604083878b8d01010101611a67565b6020840152610ee1606083878b8d01010101611a67565b6040840152888801850182016080810151606085015260a001516001600160401b0381116100b757610f21908b8b01908a8c018801850101602001611a7c565b60808401528888018501820160c081015160a085015260e00151906001600160401b0382116100b757602093610f688b868096958f968b8f84998601950101010101611a7c565b60c08201528152019201919050610e24565b81516001600160401b0381116100b75760a0888801850182018a8a0103601f1901126100b75760405191610fad83611773565b602082868a8c010101015160068110156100b7578352610fd5604083878b8d01010101611ac1565b60208401528888018501820160608101516040850152608001516001600160401b0381116100b757611015908b8b01908a8c018801850101602001611a7c565b606084015260a082868a8c0101010151906001600160401b0382116100b7576020936110528b868096958f968b8f84998601950101010101611a7c565b60808201528152019201919050610d9f565b6040513d6000823e3d90fd5b91939750919394956020806110f4600193601f1986820301875260e08c519161109a818451611af1565b6001600160801b03198584015116858201526001600160801b031960408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c080940151938201520190611874565b990193019301909289979695949293610b49565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b81811061124f575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b8381106111ce5750505050506111bb8360209360806111aa869560406001990151604085015260608501518482036060860152611874565b920151906080818403910152611874565b9701930193019092889695949293610ae0565b9091929394602080611242600193601f1987820301885260c060a08b516111f6848251611af1565b6001600160801b03198682015116868501526001600160801b03196040820151166040850152606081015115156060850152608081015160808501520151918160a08201520190611874565b9701959401929101611172565b909192936020806112a660019360bf198a820301885260a060808a51611276848251611ace565b85810151151586850152604081015115156040850152606081015160608501520151918160808201520190611874565b96019401929101611140565b90503d806000833e6112c48183611815565b60208282810103126100b7578151916001600160401b0383116100b757608083820183830103126100b757604051926112fc8461178e565b611307818301611a67565b8452602081830101516001600160401b0381116100b757838301601f82848601010112156100b75780828401015161133e81611899565b9161134c6040519384611815565b8183526020830186860160208460051b84888a01010101116100b7576020828688010101905b60208460051b84888a01010101821061153c57505050506020850152604081830101516001600160401b0381116100b757838301601f82848601010112156100b7578082840101516113c381611899565b916113d16040519384611815565b8183526020830186860160208460051b84888a01010101116100b7576020828688010101905b60208460051b84888a0101010182106114425750505050604085015260608183010151906001600160401b0382116100b757611437938301920101611c82565b606082015282610a44565b81516001600160401b0381116100b75760e0888801850182018a8a0103601f1901126100b75760405191611475836117a9565b602082868a8c010101015160058110156100b757835261149d604083878b8d01010101611a67565b60208401526114b4606083878b8d01010101611a67565b604084015288880185018201608081015160608501526114d69060a001611ac1565b60808401526114ed60c083878b8d01010101611ac1565b60a084015260e082868a8c0101010151906001600160401b0382116100b75760209361152a8b868096958f968b8f84998601950101010101611a7c565b60c082015281520192019190506113f7565b8151906001600160401b0382116100b75760208092916115698a838095898f8e9085019401010101611bd7565b8152019201919050611372565b3d9150816000823e6115888282611815565b60208183810103126100b75780516001600160401b0381116100b7576115b19282019101611c82565b826102ef565b91503d90816000843e6115ca8284611815565b60208383810103126100b7578251916001600160401b0383116100b757836000936115fb926102b296019101611bd7565b92509061024d565b3d9150816000823e6116158282611815565b60208183810103126100b75780516001600160401b0381116100b75761163e9282019101611bd7565b836101d9565b60209061164f6118b0565b82828601015201610172565b60405162461bcd60e51b815260206004820152600e60248201526d656d70747920726573706f6e736560901b6044820152606490fd5b346100b75760003660031901126100b757602060405160028152f35b346100b75760003660031901126100b757602060005460801b604051906001600160801b0319168152f35b346100b75760003660031901126100b75760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b346100b75760003660031901126100b75780733cd5334eb64ebbd4003b72022cc25465f1bfcee660209252f35b60c081019081106001600160401b0382111761175d57604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b0382111761175d57604052565b608081019081106001600160401b0382111761175d57604052565b60e081019081106001600160401b0382111761175d57604052565b604081019081106001600160401b0382111761175d57604052565b602081019081106001600160401b0382111761175d57604052565b606081019081106001600160401b0382111761175d57604052565b90601f801991011681019081106001600160401b0382111761175d57604052565b6001600160401b03811161175d57601f01601f191660200190565b60005b8381106118645750506000910152565b8181015183820152602001611854565b9060209161188d81518092818552858086019101611851565b601f01601f1916010190565b6001600160401b03811161175d5760051b60200190565b604051906118bd82611742565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b8051156118f25760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156118f25760400190565b80518210156118f25760209160051b010190565b600019811461193b5760010190565b634e487b7160e01b600052601160045260246000fd5b6040519061195e826117c4565b60008252604051602083611971836117df565b600083520152565b611981611951565b5061198a611951565b506000604051611999816117df565b526040516119a6816117df565b60008152604051916119b7836117c4565b6001600160801b0319168083526020830191825215611a2a5751516119d95790565b60405162461bcd60e51b815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601560248201527461707049642063616e6e6f7420626520656d70747960581b6044820152606490fd5b51906001600160801b0319821682036100b757565b81601f820112156100b7578051611a9281611836565b92611aa06040519485611815565b818452602082840101116100b757611abe9160208085019101611851565b90565b519081151582036100b757565b906006821015611adb5752565b634e487b7160e01b600052602160045260246000fd5b906005821015611adb5752565b908082519081815260208091019281808460051b8301019501936000915b848310611b2c5750505050505090565b9091929394958480611b91600193601f198682030187528a51611b50828251611ace565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c080928201520190611874565b9801930193019194939290611b1c565b611abe916040611bba8351606084526060840190611874565b926020810151151560208401520151906040818403910152611874565b919060c0838203126100b75760405190611bf082611742565b8193805160068110156100b757835260208101516020840152611c1560408201611ac1565b6040840152611c2660608201611ac1565b6060840152611c3760808201611ac1565b608084015260a0810151916001600160401b0383116100b75760a092611c5d9201611a7c565b910152565b60405190611c6f826117fa565b6060604083828152600060208201520152565b91906060838203126100b75760405190611c9b826117fa565b81938051916001600160401b03928381116100b75781611cbc918401611a7c565b8452611cca60208301611ac1565b602085015260408201519283116100b757604092611c5d9201611a7c565b6000805b6060830180518051831015611d515782611d0591611918565b51516006811015611d3d5715611d285750611d2160609161192c565b9050611cec565b60409350611d37925051611918565b51015190565b634e487b7160e01b84526021600452602484fd5b60405163267ac2cf60e01b815260048101859052602490fd5b6000805b6060830180518051831015611dac5782611d8791611918565b51516006811015611d3d57600214611d285750611da560609161192c565b9050611d6e565b60405163267ac2cf60e01b815260026004820152602490fdfea26469706673582212207b64e07351c9cd34c5965ce6f4227b67b78918d582cf0b658b9397a88f9949d964736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 329,
        "contract": "contracts/SismoVerifier.sol:SismoVerifier",
        "label": "APP_ID",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes16"
      }
    ],
    "types": {
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      }
    }
  }
}