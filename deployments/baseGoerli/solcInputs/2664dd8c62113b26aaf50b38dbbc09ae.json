{
  "language": "Solidity",
  "sources": {
    "contracts/helpers/interfaces/IAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IAddressesProvider {\r\n    /**\r\n     * @dev Sets the address of a contract.\r\n     * @param contractAddress Address of the contract.\r\n     * @param contractName Name of the contract.\r\n     */\r\n    function set(address contractAddress, string memory contractName) external;\r\n\r\n    /**\r\n     * @dev Sets the address of multiple contracts.\r\n     * @param contractAddresses Addresses of the contracts.\r\n     * @param contractNames Names of the contracts.\r\n     */\r\n    function setBatch(\r\n        address[] calldata contractAddresses,\r\n        string[] calldata contractNames\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the address of a contract.\r\n     * @param contractName Name of the contract (string).\r\n     * @return Address of the contract.\r\n     */\r\n    function get(string memory contractName) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the address of a contract.\r\n     * @param contractNameHash Hash of the name of the contract (bytes32).\r\n     * @return Address of the contract.\r\n     */\r\n    function get(bytes32 contractNameHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts inputed.\r\n     * @param contractNames Names of the contracts as strings.\r\n     */\r\n    function getBatch(\r\n        string[] calldata contractNames\r\n    ) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts inputed.\r\n     * @param contractNamesHash Names of the contracts as strings.\r\n     */\r\n    function getBatch(\r\n        bytes32[] calldata contractNamesHash\r\n    ) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts in `_contractNames`\r\n     * @return Names, Hashed Names and Addresses of all contracts.\r\n     */\r\n    function getAll()\r\n        external\r\n        view\r\n        returns (string[] memory, bytes32[] memory, address[] memory);\r\n}\r\n"
    },
    "contracts/helpers/interfaces/IBaseVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport {SismoConnectProof, VerifiedAuth, VerifiedClaim} from \"../utils/Structs.sol\";\r\n\r\ninterface IBaseVerifier {\r\n    function verify(\r\n        bytes16 appId,\r\n        bytes16 namespace,\r\n        bool isImpersonationMode,\r\n        bytes memory signedMessage,\r\n        SismoConnectProof memory sismoConnectProof\r\n    ) external returns (VerifiedAuth memory, VerifiedClaim memory);\r\n}\r\n"
    },
    "contracts/helpers/interfaces/ISismoConnectVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../utils/Structs.sol\";\r\n\r\ninterface ISismoConnectVerifier {\r\n    event VerifierSet(bytes32, address);\r\n\r\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\r\n    error NamespaceMismatch(\r\n        bytes16 receivedNamespace,\r\n        bytes16 expectedNamespace\r\n    );\r\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\r\n    error SignatureMessageMismatch(\r\n        bytes requestMessageSignature,\r\n        bytes responseMessageSignature\r\n    );\r\n\r\n    function verify(\r\n        SismoConnectResponse memory response,\r\n        SismoConnectRequest memory request,\r\n        SismoConnectConfig memory config\r\n    ) external view returns (SismoConnectVerifiedResult memory);\r\n\r\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/helpers/SismoConnectLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \"./utils/RequestBuilder.sol\";\r\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \"./utils/AuthRequestBuilder.sol\";\r\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \"./utils/ClaimRequestBuilder.sol\";\r\nimport {SignatureBuilder, SignatureRequest, Signature} from \"./utils/SignatureBuilder.sol\";\r\nimport {VaultConfig} from \"./utils/Structs.sol\";\r\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \"./interfaces/ISismoConnectVerifier.sol\";\r\nimport {IAddressesProvider} from \"./interfaces/IAddressesProvider.sol\";\r\nimport {SismoConnectHelper} from \"./utils/SismoConnectHelper.sol\";\r\n\r\ncontract SismoConnect {\r\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\r\n\r\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\r\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\r\n\r\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\r\n\r\n    // external libraries\r\n    AuthRequestBuilder immutable _authRequestBuilder;\r\n    ClaimRequestBuilder immutable _claimRequestBuilder;\r\n    SignatureBuilder immutable _signatureBuilder;\r\n    RequestBuilder immutable _requestBuilder;\r\n\r\n    // config\r\n    bytes16 public APP_ID;\r\n    bool public immutable IS_IMPERSONATION_MODE;\r\n\r\n    constructor() {\r\n        IS_IMPERSONATION_MODE = false;\r\n\r\n        _sismoConnectVerifier = ISismoConnectVerifier(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"sismoConnectVerifier-v1.2\"))\r\n        );\r\n        // external libraries\r\n        _authRequestBuilder = AuthRequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"authRequestBuilder-v1.1\"))\r\n        );\r\n        _claimRequestBuilder = ClaimRequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"claimRequestBuilder-v1.1\"))\r\n        );\r\n        _signatureBuilder = SignatureBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"signatureBuilder-v1.1\"))\r\n        );\r\n        _requestBuilder = RequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"requestBuilder-v1.1\"))\r\n        );\r\n    }\r\n\r\n    // public function because it needs to be used by this contract and can be used by other contracts\r\n    function config(\r\n        bytes16 _appId\r\n    ) public pure returns (SismoConnectConfig memory) {\r\n        return buildConfig(_appId);\r\n    }\r\n\r\n    function buildConfig(\r\n        bytes16 appId\r\n    ) internal pure returns (SismoConnectConfig memory) {\r\n        SismoConnectConfig memory result = SismoConnectConfig({\r\n            appId: appId,\r\n            vault: buildVaultConfig()\r\n        });\r\n        require(appId != bytes16(0), \"appId cannot be empty\");\r\n        require(\r\n            result.vault.isImpersonationMode == false,\r\n            \"impersonation mode is not supported\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\r\n        return VaultConfig({isImpersonationMode: false});\r\n    }\r\n\r\n    function verify(\r\n        bytes16 appId,\r\n        bytes memory responseBytes,\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) internal view returns (SismoConnectVerifiedResult memory) {\r\n        SismoConnectResponse memory response = abi.decode(\r\n            responseBytes,\r\n            (SismoConnectResponse)\r\n        );\r\n        SismoConnectRequest memory request = buildRequest(auths, signature);\r\n        return _sismoConnectVerifier.verify(response, request, config(appId));\r\n    }\r\n\r\n    function buildAuth(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) internal view returns (AuthRequest memory) {\r\n        return\r\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\r\n    }\r\n\r\n    function buildAuth(\r\n        AuthType authType\r\n    ) internal view returns (AuthRequest memory) {\r\n        return _authRequestBuilder.build(authType);\r\n    }\r\n\r\n    function buildSignature(\r\n        bytes memory message\r\n    ) internal view returns (SignatureRequest memory) {\r\n        return _signatureBuilder.build(message);\r\n    }\r\n\r\n    function buildRequest(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) internal view returns (SismoConnectRequest memory) {\r\n        return _requestBuilder.build(auths, signature);\r\n    }\r\n\r\n    function _GET_EMPTY_SIGNATURE_REQUEST()\r\n        internal\r\n        view\r\n        returns (SignatureRequest memory)\r\n    {\r\n        return _signatureBuilder.buildEmpty();\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/AuthBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary AuthBuilder {\r\n    // default values for Auth Request\r\n    AuthType public constant DEFAULT_AUTH_TYPE = AuthType.VAULT;\r\n    bool public constant DEFAULT_AUTH_IS_ANON = false;\r\n    uint256 public constant DEFAULT_AUTH_USER_ID = 0;\r\n    bool public constant DEFAULT_AUTH_IS_SELECTABLE_BY_USER = true;\r\n    bytes public constant DEFAULT_AUTH_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(AuthType authType) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_IS_ANON,\r\n                userId: DEFAULT_AUTH_USER_ID,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_USER_ID,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_IS_ANON,\r\n                userId: userId,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_IS_ANON,\r\n                userId: DEFAULT_AUTH_USER_ID,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_USER_ID,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_IS_ANON,\r\n                userId: userId,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isSelectableByUser\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/AuthMatchingLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\n// The role of this library is to check for a given AuthRequest if there is a matching Auth in the response\r\n// It returns a level of matching between the AuthRequest and the Auth in the response\r\n// The level of matching is a number between 0 and 7 (000 to 111 in binary)\r\n// The level of matching is calculated by adding the following values:\r\n// 1 if the authType in the AuthRequest is the same as the authType in the Auth\r\n// 2 if the isAnon in the AuthRequest is the same as the isAnon in the Auth\r\n// 4 if the userId in the AuthRequest is the same as the userId in the Auth\r\n// The level of matching is then used to determine if the AuthRequest is fulfilled or not\r\nlibrary AuthMatchingLib {\r\n    error AuthInRequestNotFoundInResponse(\r\n        uint8 requestAuthType,\r\n        bool requestIsAnon,\r\n        uint256 requestUserId,\r\n        bytes requestExtraData\r\n    );\r\n    error AuthIsAnonAndUserIdNotFound(\r\n        bool requestIsAnon,\r\n        uint256 requestUserId\r\n    );\r\n    error AuthTypeAndUserIdNotFound(\r\n        uint8 requestAuthType,\r\n        uint256 requestUserId\r\n    );\r\n    error AuthUserIdNotFound(uint256 requestUserId);\r\n    error AuthTypeAndIsAnonNotFound(uint8 requestAuthType, bool requestIsAnon);\r\n    error AuthIsAnonNotFound(bool requestIsAnon);\r\n    error AuthTypeNotFound(uint8 requestAuthType);\r\n\r\n    // Check if the AuthRequest is fulfilled by the Auth in the response\r\n    // and return the level of matching between the AuthRequest and the Auth in the response\r\n    function _matchLevel(\r\n        Auth memory auth,\r\n        AuthRequest memory authRequest\r\n    ) internal pure returns (uint8) {\r\n        uint8 matchingPropertiesLevel = 0;\r\n\r\n        if (auth.authType == authRequest.authType) {\r\n            matchingPropertiesLevel += 1; // 001\r\n        }\r\n        if (auth.isAnon == authRequest.isAnon) {\r\n            matchingPropertiesLevel += 2; // 010\r\n        }\r\n\r\n        if (authRequest.authType == AuthType.VAULT) {\r\n            // If authType is Vault the user can't choose a particular userId\r\n            // It will be always defined as userId = Hash(VaultSecret, AppId)\r\n            // There is then no specific constraint on the isSelectableByUser and userId properties)\r\n            matchingPropertiesLevel += 4; // 100\r\n        } else if (\r\n            (authRequest.isSelectableByUser == false) &&\r\n            (auth.userId == authRequest.userId)\r\n        ) {\r\n            // if the userId in the auth request can NOT be chosen by the user when generating the proof (isSelectableByUser == true)\r\n            // we check if the userId of the auth in the request matches the userId of the auth in the response\r\n            matchingPropertiesLevel += 4; // 100\r\n        } else if (authRequest.isSelectableByUser == true) {\r\n            // if the userId in the auth request can be chosen by the user when generating the proof (isSelectableByUser == true)\r\n            // we dont check if the userId of the auth in the request matches the userId of the auth in the response\r\n            // the property is considered as matching\r\n            matchingPropertiesLevel += 4; // 100\r\n        }\r\n\r\n        return matchingPropertiesLevel;\r\n    }\r\n\r\n    function handleAuthErrors(\r\n        uint8 maxMatchingProperties,\r\n        AuthRequest memory auth\r\n    ) public pure {\r\n        // if the maxMatchingProperties is equal to 7 (111 in bits), it means that the auth in the request matches with one of the auths in the response\r\n        // otherwise, we can look at the binary representation of the maxMatchingProperties to know which properties are not matching and throw an error (the 0 bits represent the properties that are not matching)\r\n        if (maxMatchingProperties == 0) {\r\n            // 000\r\n            // no property of the auth in the request matches with any property of the auths in the response\r\n            revert AuthInRequestNotFoundInResponse(\r\n                uint8(auth.authType),\r\n                auth.isAnon,\r\n                auth.userId,\r\n                auth.extraData\r\n            );\r\n        } else if (maxMatchingProperties == 1) {\r\n            // 001\r\n            // only the authType property of the auth in the request matches with one of the auths in the response\r\n            revert AuthIsAnonAndUserIdNotFound(auth.isAnon, auth.userId);\r\n        } else if (maxMatchingProperties == 2) {\r\n            // 010\r\n            // only the isAnon property of the auth in the request matches with one of the auths in the response\r\n            revert AuthTypeAndUserIdNotFound(uint8(auth.authType), auth.userId);\r\n        } else if (maxMatchingProperties == 3) {\r\n            // 011\r\n            // only the authType and isAnon properties of the auth in the request match with one of the auths in the response\r\n            revert AuthUserIdNotFound(auth.userId);\r\n        } else if (maxMatchingProperties == 4) {\r\n            // 100\r\n            // only the userId property of the auth in the request matches with one of the auths in the response\r\n            revert AuthTypeAndIsAnonNotFound(uint8(auth.authType), auth.isAnon);\r\n        } else if (maxMatchingProperties == 5) {\r\n            // 101\r\n            // only the authType and userId properties of the auth in the request matches with one of the auths in the response\r\n            revert AuthIsAnonNotFound(auth.isAnon);\r\n        } else if (maxMatchingProperties == 6) {\r\n            // 110\r\n            // only the isAnon and userId properties of the auth in the request matches with one of the auths in the response\r\n            revert AuthTypeNotFound(uint8(auth.authType));\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/AuthRequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract AuthRequestBuilder {\r\n    // default values for Auth Request\r\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\r\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\r\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\r\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    error InvalidUserIdAndIsSelectableByUserAuthType();\r\n    error InvalidUserIdAndAuthType();\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    // allow dev to choose for isOptional\r\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\r\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\r\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bool isOptional\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function _build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bytes memory extraData\r\n    ) internal pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: _authIsSelectableDefaultValue(\r\n                    authType,\r\n                    userId\r\n                ),\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function _build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) internal pure returns (AuthRequest memory) {\r\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\r\n        // to choose the account they want to use for the app.\r\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\r\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\r\n        // If this combination is detected, the function will revert with an error.\r\n        if (\r\n            authType != AuthType.VAULT &&\r\n            userId == 0 &&\r\n            isSelectableByUser == false\r\n        ) {\r\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\r\n        }\r\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\r\n        if (\r\n            authType == AuthType.VAULT &&\r\n            userId != 0 &&\r\n            isSelectableByUser == false\r\n        ) {\r\n            revert InvalidUserIdAndAuthType();\r\n        }\r\n        return\r\n            AuthRequest({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function _authIsSelectableDefaultValue(\r\n        AuthType authType,\r\n        uint256 requestedUserId\r\n    ) internal pure returns (bool) {\r\n        // isSelectableByUser value should always be false in case of VAULT authType.\r\n        // This is because the user can't select the account they want to use for the app.\r\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\r\n        if (authType == AuthType.VAULT) {\r\n            return false;\r\n        }\r\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\r\n        // so we want the default value for `isSelectableByUser` to be `true`.\r\n        if (requestedUserId == 0) {\r\n            return true;\r\n        }\r\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\r\n        // so we want the default value for `isSelectableByUser` to be `false`.\r\n        else {\r\n            return false;\r\n        }\r\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/ClaimBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary ClaimBuilder {\r\n    // default value for Claim Request\r\n    bytes16 public constant DEFAULT_CLAIM_GROUP_TIMESTAMP = bytes16(\"latest\");\r\n    uint256 public constant DEFAULT_CLAIM_VALUE = 1;\r\n    ClaimType public constant DEFAULT_CLAIM_TYPE = ClaimType.GTE;\r\n    bool public constant DEFAULT_CLAIM_IS_SELECTABLE_BY_USER = true;\r\n    bytes public constant DEFAULT_CLAIM_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(bytes16 groupId) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/ClaimMatchingLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary ClaimMatchingLib {\r\n    error ClaimInRequestNotFoundInResponse(\r\n        uint8 responseClaimType,\r\n        bytes16 responseClaimGroupId,\r\n        bytes16 responseClaimGroupTimestamp,\r\n        uint256 responseClaimValue,\r\n        bytes responseExtraData\r\n    );\r\n    error ClaimGroupIdAndGroupTimestampNotFound(\r\n        bytes16 requestClaimGroupId,\r\n        bytes16 requestClaimGroupTimestamp\r\n    );\r\n    error ClaimTypeAndGroupTimestampNotFound(\r\n        uint8 requestClaimType,\r\n        bytes16 requestClaimGroupTimestamp\r\n    );\r\n    error ClaimGroupTimestampNotFound(bytes16 requestClaimGroupTimestamp);\r\n    error ClaimTypeAndGroupIdNotFound(\r\n        uint8 requestClaimType,\r\n        bytes16 requestClaimGroupId\r\n    );\r\n    error ClaimGroupIdNotFound(bytes16 requestClaimGroupId);\r\n    error ClaimTypeNotFound(uint8 requestClaimType);\r\n\r\n    // Check if the AuthRequest is fulfilled by the Auth in the response\r\n    // and return the level of matching between the AuthRequest and the Auth in the response\r\n    function _matchLevel(\r\n        Claim memory claim,\r\n        ClaimRequest memory claimRequest\r\n    ) internal pure returns (uint8) {\r\n        uint8 matchingPropertiesLevel = 0;\r\n\r\n        if (claim.claimType == claimRequest.claimType) {\r\n            matchingPropertiesLevel += 1; // 001\r\n        }\r\n        if (claim.groupId == claimRequest.groupId) {\r\n            matchingPropertiesLevel += 2; // 010\r\n        }\r\n        if (claim.groupTimestamp == claimRequest.groupTimestamp) {\r\n            matchingPropertiesLevel += 4; // 100\r\n        }\r\n\r\n        return matchingPropertiesLevel;\r\n    }\r\n\r\n    function handleClaimErrors(\r\n        uint8 maxMatchingProperties,\r\n        ClaimRequest memory claim\r\n    ) public pure {\r\n        // if the maxMatchingProperties is equal to 7 (111 in bits), it means that the claim in the request matches with one of the claims in the response\r\n        // otherwise, we can look at the binary representation of the maxMatchingProperties to know which properties are not matching and throw an error (the 0 bits represent the properties that are not matching)\r\n        if (maxMatchingProperties == 0) {\r\n            // 000\r\n            // no property of the claim in the request matches with any property of the claims in the response\r\n            revert ClaimInRequestNotFoundInResponse(\r\n                uint8(claim.claimType),\r\n                claim.groupId,\r\n                claim.groupTimestamp,\r\n                claim.value,\r\n                claim.extraData\r\n            );\r\n        } else if (maxMatchingProperties == 1) {\r\n            // 001\r\n            // only the claimType property of the claim in the request matches with one of the claims in the response\r\n            revert ClaimGroupIdAndGroupTimestampNotFound(\r\n                claim.groupId,\r\n                claim.groupTimestamp\r\n            );\r\n        } else if (maxMatchingProperties == 2) {\r\n            // 010\r\n            // only the groupId property of the claim in the request matches with one of the claims in the response\r\n            revert ClaimTypeAndGroupTimestampNotFound(\r\n                uint8(claim.claimType),\r\n                claim.groupTimestamp\r\n            );\r\n        } else if (maxMatchingProperties == 3) {\r\n            // 011\r\n            // only the claimType and groupId properties of the claim in the request match with one of the claims in the response\r\n            revert ClaimGroupTimestampNotFound(claim.groupTimestamp);\r\n        } else if (maxMatchingProperties == 4) {\r\n            // 100\r\n            // only the groupTimestamp property of the claim in the request matches with one of the claims in the response\r\n            revert ClaimTypeAndGroupIdNotFound(\r\n                uint8(claim.claimType),\r\n                claim.groupId\r\n            );\r\n        } else if (maxMatchingProperties == 5) {\r\n            // 101\r\n            // only the claimType and groupTimestamp properties of the claim in the request matches with one of the claims in the response\r\n            revert ClaimGroupIdNotFound(claim.groupId);\r\n        } else if (maxMatchingProperties == 6) {\r\n            // 110\r\n            // only the groupId and groupTimestamp properties of the claim in the request matches with one of the claims in the response\r\n            revert ClaimTypeNotFound(uint8(claim.claimType));\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/ClaimRequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract ClaimRequestBuilder {\r\n    // default value for Claim Request\r\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\r\n        bytes16(\"latest\");\r\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\r\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\r\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\r\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\r\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    // allow dev to choose for isOptional\r\n    // we force to also set isSelectableByUser\r\n    // otherwise function signatures would be colliding\r\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\r\n    // we keep this logic for all function signature combinations\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/Fmt.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\nimport \"forge-std/console.sol\";\r\n\r\nlibrary fmt {\r\n    function printAuthRequest(\r\n        AuthRequest memory auth,\r\n        string memory indication\r\n    ) external view {\r\n        console.log(indication);\r\n        console.log(\"authType\", uint8(auth.authType));\r\n        console.log(\"isAnon\", auth.isAnon);\r\n        console.log(\"userId\", auth.userId);\r\n        console.log(\"isOptional\", auth.isOptional);\r\n        console.log(\"isSelectableByUser\", auth.isSelectableByUser);\r\n        console.log(\"extraData\");\r\n        console.logBytes(auth.extraData);\r\n    }\r\n\r\n    function printAuth(\r\n        Auth memory auth,\r\n        string memory indication\r\n    ) external view {\r\n        console.log(indication);\r\n        console.log(\"authType\", uint8(auth.authType));\r\n        console.log(\"isAnon\", auth.isAnon);\r\n        console.log(\"userId\", auth.userId);\r\n        console.log(\"isSelectableByuser\", auth.isSelectableByUser);\r\n        console.log(\"extraData\");\r\n        console.logBytes(auth.extraData);\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/RequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\nimport {SignatureBuilder} from \"./SignatureBuilder.sol\";\r\n\r\ncontract RequestBuilder {\r\n    // default value for namespace\r\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\"main\"));\r\n    // default value for a signature request\r\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\r\n        SignatureRequest({\r\n            message: \"MESSAGE_SELECTED_BY_USER\",\r\n            isSelectableByUser: false,\r\n            extraData: \"\"\r\n        });\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    // build with arrays for auths and claims\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/SignatureBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract SignatureBuilder {\r\n    // default values for Signature Request\r\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\r\n        \"MESSAGE_SELECTED_BY_USER\";\r\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\r\n        false;\r\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes memory message\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bool isSelectableByUser\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bool isSelectableByUser\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function buildEmpty() external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/SismoConnectHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary SismoConnectHelper {\r\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\r\n\r\n    function getUserId(\r\n        SismoConnectVerifiedResult memory result,\r\n        AuthType authType\r\n    ) internal pure returns (uint256) {\r\n        // get the first userId that matches the authType\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            if (result.auths[i].authType == authType) {\r\n                return result.auths[i].userId;\r\n            }\r\n        }\r\n        revert AuthTypeNotFoundInVerifiedResult(authType);\r\n    }\r\n\r\n    function getUserIds(\r\n        SismoConnectVerifiedResult memory result,\r\n        AuthType authType\r\n    ) internal pure returns (uint256[] memory) {\r\n        // get all userIds that match the authType\r\n        uint256[] memory userIds = new uint256[](result.auths.length);\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            if (result.auths[i].authType == authType) {\r\n                userIds[i] = result.auths[i].userId;\r\n            }\r\n        }\r\n        return userIds;\r\n    }\r\n\r\n    function getSignedMessage(\r\n        SismoConnectVerifiedResult memory result\r\n    ) internal pure returns (bytes memory) {\r\n        return result.signedMessage;\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/SismoConnectProofBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary ProofBuilder {\r\n    // default values for SismoConnect Proof\r\n    bytes32 public constant DEFAULT_PROOF_PROVING_SCHEME =\r\n        bytes32(\"hydra-s3.1\");\r\n    bytes public constant DEFAULT_PROOF_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        Auth memory auth,\r\n        Claim memory claim,\r\n        bytes memory proofData\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](1);\r\n        auths[0] = auth;\r\n        Claim[] memory claims = new Claim[](1);\r\n        claims[0] = claim;\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: DEFAULT_PROOF_PROVING_SCHEME,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth memory auth,\r\n        Claim memory claim,\r\n        bytes memory proofData,\r\n        bytes32 provingScheme\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](1);\r\n        auths[0] = auth;\r\n        Claim[] memory claims = new Claim[](1);\r\n        claims[0] = claim;\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: provingScheme,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth memory auth,\r\n        bytes memory proofData\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](1);\r\n        auths[0] = auth;\r\n        Claim[] memory claims = new Claim[](0);\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: DEFAULT_PROOF_PROVING_SCHEME,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth memory auth,\r\n        bytes memory proofData,\r\n        bytes32 provingScheme\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](1);\r\n        auths[0] = auth;\r\n        Claim[] memory claims = new Claim[](0);\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: provingScheme,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Claim memory claim,\r\n        bytes memory proofData\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](0);\r\n        Claim[] memory claims = new Claim[](1);\r\n        claims[0] = claim;\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: DEFAULT_PROOF_PROVING_SCHEME,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Claim memory claim,\r\n        bytes memory proofData,\r\n        bytes32 provingScheme\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](0);\r\n        Claim[] memory claims = new Claim[](1);\r\n        claims[0] = claim;\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: provingScheme,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth[] memory auths,\r\n        Claim[] memory claims,\r\n        bytes memory proofData\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: DEFAULT_PROOF_PROVING_SCHEME,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth[] memory auths,\r\n        Claim[] memory claims,\r\n        bytes memory proofData,\r\n        bytes32 provingScheme\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: provingScheme,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nstruct SismoConnectRequest {\r\n    bytes16 namespace;\r\n    AuthRequest[] auths;\r\n    ClaimRequest[] claims;\r\n    SignatureRequest signature;\r\n}\r\n\r\nstruct SismoConnectConfig {\r\n    bytes16 appId;\r\n    VaultConfig vault;\r\n}\r\n\r\nstruct VaultConfig {\r\n    bool isImpersonationMode;\r\n}\r\n\r\nstruct AuthRequest {\r\n    AuthType authType;\r\n    uint256 userId; // default: 0\r\n    // flags\r\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\r\n    bool isOptional; // default: false\r\n    bool isSelectableByUser; // default: true\r\n    //\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nstruct ClaimRequest {\r\n    ClaimType claimType; // default: GTE\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp; // default: bytes16(\"latest\")\r\n    uint256 value; // default: 1\r\n    // flags\r\n    bool isOptional; // default: false\r\n    bool isSelectableByUser; // default: true\r\n    //\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nstruct SignatureRequest {\r\n    bytes message; // default: \"MESSAGE_SELECTED_BY_USER\"\r\n    bool isSelectableByUser; // default: false\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nenum AuthType {\r\n    VAULT,\r\n    GITHUB,\r\n    TWITTER,\r\n    EVM_ACCOUNT,\r\n    TELEGRAM,\r\n    DISCORD\r\n}\r\n\r\nenum ClaimType {\r\n    GTE,\r\n    GT,\r\n    EQ,\r\n    LT,\r\n    LTE\r\n}\r\n\r\nstruct Auth {\r\n    AuthType authType;\r\n    bool isAnon;\r\n    bool isSelectableByUser;\r\n    uint256 userId;\r\n    bytes extraData;\r\n}\r\n\r\nstruct Claim {\r\n    ClaimType claimType;\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp;\r\n    bool isSelectableByUser;\r\n    uint256 value;\r\n    bytes extraData;\r\n}\r\n\r\nstruct Signature {\r\n    bytes message;\r\n    bytes extraData;\r\n}\r\n\r\nstruct SismoConnectResponse {\r\n    bytes16 appId;\r\n    bytes16 namespace;\r\n    bytes32 version;\r\n    bytes signedMessage;\r\n    SismoConnectProof[] proofs;\r\n}\r\n\r\nstruct SismoConnectProof {\r\n    Auth[] auths;\r\n    Claim[] claims;\r\n    bytes32 provingScheme;\r\n    bytes proofData;\r\n    bytes extraData;\r\n}\r\n\r\nstruct SismoConnectVerifiedResult {\r\n    bytes16 appId;\r\n    bytes16 namespace;\r\n    bytes32 version;\r\n    VerifiedAuth[] auths;\r\n    VerifiedClaim[] claims;\r\n    bytes signedMessage;\r\n}\r\n\r\nstruct VerifiedAuth {\r\n    AuthType authType;\r\n    bool isAnon;\r\n    uint256 userId;\r\n    bytes extraData;\r\n    bytes proofData;\r\n}\r\n\r\nstruct VerifiedClaim {\r\n    ClaimType claimType;\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp;\r\n    uint256 value;\r\n    bytes extraData;\r\n    uint256 proofId;\r\n    bytes proofData;\r\n}\r\n"
    },
    "contracts/SismoPKP.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISismoVerifier {\r\n    function sismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        bytes32 appId,\r\n        bytes32 hash\r\n    ) external view returns (bytes memory, bytes memory);\r\n}\r\n\r\ncontract SismoPKP {\r\n    mapping(bytes32 => mapping(bytes32 => bytes)) private vaults;\r\n    mapping(bytes32 => mapping(bytes32 => bytes32)) private passKey;\r\n\r\n    bytes32[] public allVaultIds; // New array to keep track of all vault IDs\r\n\r\n    address public verifierContract;\r\n\r\n    constructor(address _verifierContract) {\r\n        verifierContract = _verifierContract;\r\n    }\r\n\r\n    function createPassKey(\r\n        bytes memory sismoConnectResponse,\r\n        bytes32 appId,\r\n        bytes32 onetimePass // pass in the signature\r\n    ) external returns (bytes32) {\r\n        (bytes memory vaultId, bytes memory signedMessage) = _verify(\r\n            sismoConnectResponse,\r\n            appId,\r\n            onetimePass\r\n        );\r\n\r\n        // random number 1 to 100\r\n        uint256 rand = uint256(\r\n            keccak256(abi.encodePacked(block.timestamp, block.prevrandao))\r\n        ) % 100000;\r\n\r\n        // create random 32 hash for passkey\r\n        bytes32 key = keccak256(\r\n            abi.encodePacked(\r\n                block.timestamp,\r\n                block.prevrandao,\r\n                rand,\r\n                signedMessage,\r\n                vaultId\r\n            )\r\n        );\r\n\r\n        passKey[appId][keccak256(vaultId)] = key;\r\n\r\n        return key;\r\n    }\r\n\r\n    function getPassKey(\r\n        bytes memory sismoConnectResponse,\r\n        bytes32 appId,\r\n        bytes32 onetimePass\r\n    ) external view returns (bytes32) {\r\n        (bytes memory vaultId, ) = _verify(\r\n            sismoConnectResponse,\r\n            appId,\r\n            onetimePass\r\n        );\r\n\r\n        return passKey[appId][keccak256(vaultId)];\r\n    }\r\n\r\n    function setWalletInfo(\r\n        bytes32 encryptedVaultId,\r\n        bytes32 appId,\r\n        bytes memory walletInfo\r\n    ) external {\r\n        require(\r\n            vaults[appId][encryptedVaultId].length == 0,\r\n            \"Wallet info already exists\"\r\n        );\r\n        vaults[appId][encryptedVaultId] = walletInfo;\r\n\r\n        allVaultIds.push(encryptedVaultId); // Add to list of all vault IDs\r\n    }\r\n\r\n    function getWalletInfo(\r\n        bytes32 encryptedVaultId,\r\n        bytes32 appId\r\n    ) external view returns (bytes memory) {\r\n        return vaults[appId][encryptedVaultId];\r\n    }\r\n\r\n    function _verify(\r\n        bytes memory sismoConnectResponse,\r\n        bytes32 appId,\r\n        bytes32 onetimePass\r\n    ) internal view returns (bytes memory, bytes memory) {\r\n        (bytes memory vaultId, bytes memory signedMessage) = ISismoVerifier(\r\n            verifierContract\r\n        ).sismoVerify(sismoConnectResponse, appId, onetimePass);\r\n\r\n        bytes32 _onetimePass = abi.decode(signedMessage, (bytes32));\r\n\r\n        require(_onetimePass == onetimePass, \"WRONG_ONETIMEPASS\");\r\n\r\n        return (vaultId, signedMessage);\r\n    }\r\n}\r\n"
    },
    "contracts/SismoVerifier.sol": {
      "content": "/**\r\n * @title MecenateVerifier\r\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\r\n */\r\npragma solidity ^0.8.17;\r\nimport \"./helpers/SismoConnectLib.sol\";\r\n\r\ncontract SismoVerifier is SismoConnect {\r\n    function sismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        bytes16 _appId,\r\n        bytes32 _hash\r\n    ) external view returns (bytes memory, bytes memory) {\r\n        require(sismoConnectResponse.length > 0, \"empty response\");\r\n\r\n        // Build authorization requests\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n\r\n        auths[0] = buildAuth(AuthType.VAULT);\r\n\r\n        // Verify the response\r\n        SismoConnectVerifiedResult memory result = verify({\r\n            appId: _appId,\r\n            responseBytes: sismoConnectResponse,\r\n            auths: auths,\r\n            signature: buildSignature({message: abi.encode(_hash)})\r\n        });\r\n\r\n        bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\r\n            result\r\n        );\r\n\r\n        // Store the verified auths\r\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\r\n            result.auths.length\r\n        );\r\n\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            _verifiedAuths[i] = result.auths[i];\r\n        }\r\n\r\n        // Get the vaultId of the user\r\n        // --> vaultId = hash(userVaultSecret, appId)\r\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\r\n\r\n        // Convert the vaultId to bytes\r\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\r\n\r\n        return (vaultIdBytes, signedMessage);\r\n    }\r\n}\r\n"
    },
    "forge-std/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}