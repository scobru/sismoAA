{
  "language": "Solidity",
  "sources": {
    "contracts/SismoAA.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISismoVerifier {\r\n    function sismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        bytes16 _appId\r\n    ) external view returns (uint256);\r\n}\r\n\r\ncontract SismoAA {\r\n    bytes32 public owner;\r\n    address public verifierContract;\r\n\r\n    constructor(bytes32 _owner, address _verifierContract) {\r\n        owner = _owner;\r\n        verifierContract = _verifierContract;\r\n    }\r\n\r\n    struct TxCall {\r\n        address to;\r\n        uint256 value;\r\n        bytes data;\r\n    }\r\n\r\n    function executeTransaction(\r\n        bytes memory sismoConnectResponse,\r\n        bytes16 _appId,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) public returns (bool) {\r\n        uint256 vaultId = ISismoVerifier(verifierContract).sismoVerify(\r\n            sismoConnectResponse,\r\n            _appId\r\n        );\r\n\r\n        require(vaultId != 0, \"Invalid vaultId\");\r\n\r\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\r\n\r\n        require(keccak256(vaultIdBytes) == owner, \"Not the owner\");\r\n\r\n        (bool success, ) = _to.call{value: _value}(_data);\r\n\r\n        require(success, \"Transaction failed\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function testSismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        bytes16 _appId\r\n    ) public view returns (uint256) {\r\n        uint256 vaultId = ISismoVerifier(verifierContract).sismoVerify(\r\n            sismoConnectResponse,\r\n            _appId\r\n        );\r\n\r\n        return vaultId;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/SismoAAFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./SismoAA.sol\";\r\n\r\ncontract SismoAAFactory {\r\n    address public verifierContract;\r\n    address[] public deployedAA;\r\n\r\n    constructor(address _verifierContract) {\r\n        verifierContract = _verifierContract;\r\n    }\r\n\r\n    mapping(bytes32 => address) public accounts;\r\n\r\n    function createAA(bytes32 _owner) public returns (address) {\r\n        address newAA = address(new SismoAA(_owner, verifierContract));\r\n        deployedAA.push(newAA);\r\n        accounts[_owner] = newAA;\r\n\r\n        return newAA;\r\n    }\r\n\r\n    function getDeployedAA() public view returns (address[] memory) {\r\n        return deployedAA;\r\n    }\r\n\r\n    function getAAForVaultId(bytes32 _owner) external view returns (address) {\r\n        return accounts[_owner];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}